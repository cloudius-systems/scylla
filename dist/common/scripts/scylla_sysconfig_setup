#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2018-present ScyllaDB
#

#
# SPDX-License-Identifier: AGPL-3.0-or-later

import os
import sys
import argparse
import subprocess
from scylla_util import *
from subprocess import run

# XXX: This program is wrapper for scylla_perftune_setup to keep compatibility
# with existing scripts, some parameters are just ignored
if __name__ == '__main__':
    if os.getuid() > 0:
        print('Requires root permission.')
        sys.exit(1)

    parser = argparse.ArgumentParser(description='Setting parameters on Scylla sysconfig file.')
    parser.add_argument('--nic',
                        help='specify NIC')
    parser.add_argument('--mode',
                        help='network mode (posix, dpdk)')
    parser.add_argument('--nr-hugepages', type=int,
                        help='number of hugepages')
    parser.add_argument('--user',
                        help='user (dpdk requires root)')
    parser.add_argument('--group',
                        help='group (dpdk requires root)')
    parser.add_argument('--homedir',
                        help='scylla home directory')
    parser.add_argument('--confdir',
                        help='scylla config directory')
    parser.add_argument('--setup-nic-and-disks', action='store_true',
                        help='setup NIC\'s and disks\' interrupts, RPS, XPS, nomerges and I/O scheduler')
    parser.add_argument('--set-clocksource', action='store_true',
                        help='Set enforcing fastest available Linux clocksource')
    parser.add_argument('--disable-writeback-cache', action='store_true',
                        help='Disable disk writeback cache')
    args = parser.parse_args()

    new_prog = scriptsdir() + '/scylla_perftune_setup'
    new_args = [new_prog]

    for k, v in args.__dict__.items():
        # pass only these options to scylla_perftune_setup
        if not k in ['nic', 'setup_nic_and_disks', 'set_clocksource', 'disable_writeback_cache']:
            continue
        if not v:
            continue
        if type(v) == bool:
            new_args += ['--' + k.replace('_', '-')]
        else:
            new_args += ['--' + k.replace('_', '-'), v]
    os.execv(new_prog, new_args)
